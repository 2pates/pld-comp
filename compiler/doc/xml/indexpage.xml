<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Projet compilateur</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><anchor id="index_1md__2home_2gasp_2_documents_2ecole_2s4_2comp_2pld-comp_2_r_e_a_d_m_e"/> <ulink url="doc_x86.pdf">doc x86</ulink></para>
<sect1 id="index_1autotoc_md1">
<title>Choices</title>
<para>Here we put the non-programming choices we made</para>
<para><itemizedlist>
<listitem><para>variables can be only constitued of letters, <computeroutput>_</computeroutput> and numbers</para>
</listitem><listitem><para>for the moment we can do multiple affectations</para>
</listitem><listitem><para>we choose to change the memory_offset and the tmp_index before the actions</para>
</listitem><listitem><para>the char have size 4</para>
</listitem><listitem></listitem><listitem></listitem><listitem></listitem><listitem></listitem></itemizedlist>
</para>
</sect1>
<sect1 id="index_1autotoc_md2">
<title>TODO</title>
<sect2 id="index_1autotoc_md3">
<title>Mandatory</title>
<para><itemizedlist>
<listitem><para>[x] Data type char</para>
</listitem><listitem><para>[x] Data type int</para>
</listitem><listitem><para>[x] Variables</para>
</listitem><listitem><para>[x] Integer constants</para>
</listitem><listitem><para>[x] Basic arithmetic operations: +,-, *</para>
</listitem><listitem><para>[x] Division and modulo (in IR)</para>
</listitem><listitem><para>[x] Bit-by-bit logical operations: |, &amp;,Ë†</para>
</listitem><listitem><para>[x] Comparison operations: ==, !=, &lt;, &gt;</para>
</listitem><listitem><para>[x] Unary operations: ! and - and ~ (bonus)</para>
</listitem><listitem><para>[x] Declaration of variables anywhere</para>
</listitem><listitem><para>[x] Assignment (which, in C, also returns a value)</para>
</listitem><listitem><para>[x] Possibility of initializing a variable when declaring it</para>
</listitem><listitem><para>[x] Use of standard putchar and getchar functions for I/O</para>
</listitem><listitem><para>[ ] Define functions with parameters, and int, char or void return type : <emphasis>James</emphasis></para>
</listitem><listitem><para>[x] Check consistency of function calls and parameters (reserved names)</para>
</listitem><listitem><para>[x] Block structure using { and }</para>
</listitem><listitem><para>[x] Support for variable scopes and shadowing</para>
</listitem><listitem><para>[x] If, else, while control structures</para>
</listitem><listitem><para>[x] Support for return expression anywhere</para>
</listitem><listitem><para>[x] Check that a variable used in an expression has been declared</para>
</listitem><listitem><para>[x] Check that a variable is not declared more than once</para>
</listitem><listitem><para>[ ] Check that a declared variable is used at least once: I don&apos;t think this has been implemented ~James</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md4">
<title>Optional</title>
<para><itemizedlist>
<listitem><para>[ ] Retargeting to multiple architectures: x86, MSP430, ARM</para>
</listitem><listitem><para>[ ] Double support with all implicit conversions</para>
</listitem><listitem><para>[ ] Simple constant propagation</para>
</listitem><listitem><para>[ ] Propagation of constant variables (with data-flow analysis)</para>
</listitem><listitem><para>[ ] Arrays (one-dimensional)</para>
</listitem><listitem><para>[ ] Pointers</para>
</listitem><listitem><para>[ ] Break and continue : <emphasis>Mathieu</emphasis></para>
</listitem><listitem><para>[ ] Char data type width support (8-bit integer)</para>
</listitem><listitem><para>[ ] Character strings represented by char arrays</para>
</listitem><listitem><para>[ ] Switch...case : <emphasis>Bachir</emphasis></para>
</listitem><listitem><para>[x] Lazy operators ||, &amp;&amp;</para>
</listitem><listitem><para>[x] Assignment operators +=, -= etc., increment ++ and decrement <ndash/></para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="index_1autotoc_md5">
<title>Bonus</title>
<para><itemizedlist>
<listitem><para>[ ] Data type void</para>
</listitem><listitem><para>[ ] Data type pointer address</para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
<sect1 id="index_1autotoc_md6">
<title>Ressources</title>
<para><itemizedlist>
<listitem><para>see example of <ulink url="https://github.com/antlr/grammars-v4/blob/master/c/C.g4">c.g4</ulink></para>
</listitem><listitem></listitem><listitem></listitem></itemizedlist>
</para>
<para><image type="html" name="operator_priority.png" alt="operator priority" inline="yes"></image>
 </para>
</sect1>
    </detaileddescription>
    <location file="/home/gasp/Documents/ecole/s4/comp/pld-comp/README.md"/>
  </compounddef>
</doxygen>

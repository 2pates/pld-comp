<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="_r_e_a_d_m_e_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">#<sp/>Projet<sp/>compilateur</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">[doc<sp/>x86](doc_x86.pdf)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Choices</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here<sp/>we<sp/>put<sp/>the<sp/>non-programming<sp/>choices<sp/>we<sp/>made</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>variables<sp/>can<sp/>be<sp/>only<sp/>constitued<sp/>of<sp/>letters,<sp/>`_`<sp/>and<sp/>numbers</highlight></codeline>
<codeline><highlight class="normal">-<sp/>for<sp/>the<sp/>moment<sp/>we<sp/>can<sp/>do<sp/>multiple<sp/>affectations</highlight></codeline>
<codeline><highlight class="normal">-<sp/>we<sp/>choose<sp/>to<sp/>change<sp/>the<sp/>memory_offset<sp/>and<sp/>the<sp/>tmp_index<sp/>before<sp/>the<sp/>actions</highlight></codeline>
<codeline><highlight class="normal">-<sp/>the<sp/>char<sp/>have<sp/>size<sp/>4</highlight></codeline>
<codeline><highlight class="normal">-<sp/></highlight></codeline>
<codeline><highlight class="normal">-<sp/></highlight></codeline>
<codeline><highlight class="normal">-<sp/></highlight></codeline>
<codeline><highlight class="normal">-<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>TODO</highlight></codeline>
<codeline><highlight class="normal">###<sp/>Mandatory</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Data<sp/>type<sp/>char</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Data<sp/>type<sp/>int</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Variables</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Integer<sp/>constants</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Basic<sp/>arithmetic<sp/>operations:<sp/>+,-,<sp/>*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Division<sp/>and<sp/>modulo<sp/>(in<sp/>IR)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Bit-by-bit<sp/>logical<sp/>operations:<sp/>|,<sp/>&amp;,Ë†</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Comparison<sp/>operations:<sp/>==,<sp/>!=,<sp/>&lt;,<sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Unary<sp/>operations:<sp/>!<sp/>and<sp/>-<sp/>and<sp/>~<sp/>(bonus)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Declaration<sp/>of<sp/>variables<sp/>anywhere</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Assignment<sp/>(which,<sp/>in<sp/>C,<sp/>also<sp/>returns<sp/>a<sp/>value)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Possibility<sp/>of<sp/>initializing<sp/>a<sp/>variable<sp/>when<sp/>declaring<sp/>it</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Use<sp/>of<sp/>standard<sp/>putchar<sp/>and<sp/>getchar<sp/>functions<sp/>for<sp/>I/O</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Define<sp/>functions<sp/>with<sp/>parameters,<sp/>and<sp/>int,<sp/>char<sp/>or<sp/>void<sp/>return<sp/>type<sp/>:<sp/>*James*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Check<sp/>consistency<sp/>of<sp/>function<sp/>calls<sp/>and<sp/>parameters<sp/>(reserved<sp/>names)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Block<sp/>structure<sp/>using<sp/>{<sp/>and<sp/>}</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Support<sp/>for<sp/>variable<sp/>scopes<sp/>and<sp/>shadowing</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>If,<sp/>else,<sp/>while<sp/>control<sp/>structures</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Support<sp/>for<sp/>return<sp/>expression<sp/>anywhere</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Check<sp/>that<sp/>a<sp/>variable<sp/>used<sp/>in<sp/>an<sp/>expression<sp/>has<sp/>been<sp/>declared</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Check<sp/>that<sp/>a<sp/>variable<sp/>is<sp/>not<sp/>declared<sp/>more<sp/>than<sp/>once</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Check<sp/>that<sp/>a<sp/>declared<sp/>variable<sp/>is<sp/>used<sp/>at<sp/>least<sp/>once:<sp/>I<sp/>don&apos;t<sp/>think<sp/>this<sp/>has<sp/>been<sp/>implemented<sp/>~James</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Optional</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Retargeting<sp/>to<sp/>multiple<sp/>architectures:<sp/>x86,<sp/>MSP430,<sp/>ARM</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Double<sp/>support<sp/>with<sp/>all<sp/>implicit<sp/>conversions</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Simple<sp/>constant<sp/>propagation</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Propagation<sp/>of<sp/>constant<sp/>variables<sp/>(with<sp/>data-flow<sp/>analysis)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Arrays<sp/>(one-dimensional)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Pointers</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Break<sp/>and<sp/>continue<sp/>:<sp/>*Mathieu*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Char<sp/>data<sp/>type<sp/>width<sp/>support<sp/>(8-bit<sp/>integer)</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Character<sp/>strings<sp/>represented<sp/>by<sp/>char<sp/>arrays</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Switch...case<sp/>:<sp/>*Bachir*</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Lazy<sp/>operators<sp/>||,<sp/>&amp;&amp;</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[x]<sp/>Assignment<sp/>operators<sp/>+=,<sp/>-=<sp/>etc.,<sp/>increment<sp/>++<sp/>and<sp/>decrement<sp/>--</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">###<sp/>Bonus</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Data<sp/>type<sp/>void</highlight></codeline>
<codeline><highlight class="normal">-<sp/>[<sp/>]<sp/>Data<sp/>type<sp/>pointer<sp/>address</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">##<sp/>Ressources</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">-<sp/>see<sp/>example<sp/>of<sp/>[c.g4](https://github.com/antlr/grammars-v4/blob/master/c/C.g4)</highlight></codeline>
<codeline><highlight class="normal">-<sp/></highlight></codeline>
<codeline><highlight class="normal">-<sp/></highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">![operator<sp/>priority](operator_priority.png<sp/>&quot;source<sp/>-<sp/>wikipedia&quot;)</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline></codeline>
    </programlisting>
    <location file="/home/gasp/Documents/ecole/s4/comp/pld-comp/README.md"/>
  </compounddef>
</doxygen>
